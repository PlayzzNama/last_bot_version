require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const cors = require("cors");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
app.use(cors());
app.use(express.json());

// ID –∞–±–æ @username —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
const CHANNEL_ID = "@live_fakultet_bot";

// —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
async function checkSubscription(userId) {
  try {
    const member = await bot.telegram.getChatMember(CHANNEL_ID, userId);
    // —Å—Ç–∞—Ç—É—Å–∏: creator, administrator, member = –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    if (["creator", "administrator", "member"].includes(member.status)) {
      return true;
    }
    return false;
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏:", err.message);
    return false;
  }
}

// —Å—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  const isSubscribed = await checkSubscription(ctx.from.id);

  if (isSubscribed) {
    ctx.reply(
      "–ü—Ä–∏–≤—ñ—Ç üëã –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π ‚úÖ\n–í—ñ–¥–∫—Ä–∏–π Mini App:",
      Markup.inlineKeyboard([
        [Markup.button.webApp("‚öΩ –í—ñ–¥–∫—Ä–∏—Ç–∏", "https://—Ç–≤—ñ–π-–¥–µ–ø–ª–æ–π.vercel.app")]
      ])
    );
  } else {
    ctx.reply(
      "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\nüëâ https://t.me/—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª",
      Markup.inlineKeyboard([
        [Markup.button.url("üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", "https://t.me/—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª")],
        [Markup.button.callback("‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", "check_subscribe")]
      ])
    );
  }
});

// –∫–Ω–æ–ø–∫–∞ "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è"
bot.action("check_subscribe", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx.from.id);

  if (isSubscribed) {
    ctx.reply(
      "‚úÖ –î–æ—Å—Ç—É–ø –≤—ñ–¥–∫—Ä–∏—Ç–æ! –í—ñ–¥–∫—Ä–∏–π Mini App:",
      Markup.inlineKeyboard([
        [Markup.button.webApp("‚öΩ –í—ñ–¥–∫—Ä–∏—Ç–∏", "https://—Ç–≤—ñ–π-–¥–µ–ø–ª–æ–π.vercel.app")]
      ])
    );
  } else {
    ctx.reply("‚ùå –¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è! üëâ https://t.me/—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª");
  }
});

// –ø—Ä–∏–π–æ–º –¥–∞–Ω–∏—Ö —ñ–∑ Mini App
bot.on("web_app_data", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx.from.id);

  if (!isSubscribed) {
    return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ https://t.me/—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª");
  }

  const data = JSON.parse(ctx.message.web_app_data.data);
  ctx.reply(`–û—Ç—Ä–∏–º–∞–≤ –≤—ñ–¥ —Ç–µ–±–µ: ${JSON.stringify(data)}`);
});

// –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
bot.launch();
